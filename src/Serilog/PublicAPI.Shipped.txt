Rocket.Surgery.Conventions.SerilogHostBuilderExtensions
Rocket.Surgery.Extensions.Serilog.Conventions.EnvironmentLoggingConvention
Rocket.Surgery.Extensions.Serilog.Conventions.EnvironmentLoggingConvention.EnvironmentLoggingConvention() -> void
Rocket.Surgery.Extensions.Serilog.Conventions.EnvironmentLoggingConvention.Register(Rocket.Surgery.Extensions.Serilog.ISerilogConventionContext context) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogConditionallyAsyncLoggingConvention
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogConditionallyAsyncLoggingConvention.Register(Rocket.Surgery.Extensions.Serilog.ISerilogConventionContext context) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogConditionallyAsyncLoggingConvention.SerilogConditionallyAsyncLoggingConvention() -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogConsoleLoggingConvention
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogConsoleLoggingConvention.SerilogConsoleLoggingConvention(Rocket.Surgery.Extensions.Serilog.RocketSerilogOptions options = null) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogDebugLoggingConvention
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogDebugLoggingConvention.SerilogDebugLoggingConvention(Rocket.Surgery.Extensions.Serilog.RocketSerilogOptions options = null) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogEnrichLoggingConvention
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogEnrichLoggingConvention.Register(Rocket.Surgery.Extensions.Serilog.ISerilogConventionContext context) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogEnrichLoggingConvention.SerilogEnrichLoggingConvention() -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogExtensionsConvention
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogExtensionsConvention.Register(Rocket.Surgery.Extensions.DependencyInjection.IServiceConventionContext context) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogExtensionsConvention.SerilogExtensionsConvention(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Microsoft.Extensions.Logging.ILogger diagnosticSource, Rocket.Surgery.Extensions.Serilog.RocketSerilogOptions options = null) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogReadFromConfigurationConvention
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogReadFromConfigurationConvention.Register(Rocket.Surgery.Extensions.Configuration.IConfigurationConventionContext context) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogReadFromConfigurationConvention.Register(Rocket.Surgery.Extensions.Serilog.ISerilogConventionContext context) -> void
Rocket.Surgery.Extensions.Serilog.Conventions.SerilogReadFromConfigurationConvention.SerilogReadFromConfigurationConvention() -> void
Rocket.Surgery.Extensions.Serilog.SerilogBuilder
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.Build() -> Serilog.ILogger
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.Configuration.get -> Microsoft.Extensions.Configuration.IConfiguration
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.Configure() -> Serilog.LoggerConfiguration
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.Environment.get -> Rocket.Surgery.Conventions.IRocketEnvironment
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.Logger.get -> Microsoft.Extensions.Logging.ILogger
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.LoggerConfiguration.get -> Serilog.LoggerConfiguration
Rocket.Surgery.Extensions.Serilog.SerilogBuilder.SerilogBuilder(Rocket.Surgery.Conventions.Scanners.IConventionScanner scanner, Rocket.Surgery.Conventions.Reflection.IAssemblyProvider assemblyProvider, Rocket.Surgery.Conventions.Reflection.IAssemblyCandidateFinder assemblyCandidateFinder, Rocket.Surgery.Conventions.IRocketEnvironment environment, Microsoft.Extensions.Configuration.IConfiguration configuration, Serilog.LoggerConfiguration loggerConfiguration, Microsoft.Extensions.Logging.ILogger diagnosticSource, System.Collections.Generic.IDictionary<object, object> properties) -> void
abstract Rocket.Surgery.Extensions.Serilog.Conventions.SerilogConditionallyAsyncLoggingConvention.Register(Serilog.Configuration.LoggerSinkConfiguration configuration) -> void
static Rocket.Surgery.Conventions.SerilogHostBuilderExtensions.UseSerilog(this Rocket.Surgery.Conventions.IConventionHostBuilder container, Rocket.Surgery.Extensions.Serilog.RocketSerilogOptions options = null) -> Rocket.Surgery.Conventions.IConventionHostBuilder
static Rocket.Surgery.Conventions.SerilogHostBuilderExtensions.WriteToAsyncConditionally(this Rocket.Surgery.Extensions.Serilog.ISerilogConventionContext context, System.Action<Serilog.Configuration.LoggerSinkConfiguration> register) -> Rocket.Surgery.Extensions.Serilog.ISerilogConventionContext